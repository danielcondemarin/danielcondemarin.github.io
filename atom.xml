<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>d&#39; dev panda ヽ(￣(ｴ)￣)ﾉ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.devpanda.me/"/>
  <updated>2018-06-10T00:56:54.442Z</updated>
  <id>https://www.devpanda.me/</id>
  
  <author>
    <name>Daniel Conde</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Using Alexa to trigger builds in TeamCity</title>
    <link href="https://www.devpanda.me/2018/06/10/Using-Alexa-to-trigger-builds-in-TeamCity/"/>
    <id>https://www.devpanda.me/2018/06/10/Using-Alexa-to-trigger-builds-in-TeamCity/</id>
    <published>2018-06-10T00:53:00.000Z</published>
    <updated>2018-06-10T00:56:54.442Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1528591697/alexa_teamcity_cover_xs8rx5.jpg" alt="alexateamcity"></p><p>That’s right, wouldn’t be cool if you could trigger your builds from Alexa? Well, you can now, at least if you’re using TeamCity.</p><p><strong>What you’ll need:</strong></p><ul><li>Go (<a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a>)</li><li>ASK CLI (<a href="https://www.npmjs.com/package/ask-cli" target="_blank" rel="noopener">https://www.npmjs.com/package/ask-cli</a>)</li><li>ngrok (<a href="https://ngrok.com/download" target="_blank" rel="noopener">https://ngrok.com/download</a>)</li></ul><p>Make sure you install and setup all of that before what comes next.</p><p><strong>Let’s have a look at the following diagram:</strong></p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1528586168/AlexaTeamCity_q4su1o.png" alt="diagram"></p><p>Note how we’re not using the typical Alexa Skill deployment approach backed by an AWS Lambda. Instead, we’re hosting a local skill server which will be publicly visible on the internet via ngrok. But why!!? Well, the reason is simple, my TeamCity Server is hosted on a private network, neither addressable on the Internet or hosted in a VPC in AWS, so AWS Lambda wasn’t an option. I guess there could be other options to expose your local TeamCity Server, but I just wanted to try this approach instead.</p><p><strong>Okay … how do I set it all up!?</strong></p><p>Ngrok will expose our local skill server to the Internet. Open a terminal and run <code>ngrok http 3000</code>, take a note of the HTTPS Forwarding URL:</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1528463102/AlexaTeamCity_ngrok_epnugo.png" alt="ngrok"></p><p>Keep ngrok running, we’ll comeback to it later.</p><p>Next, pull and install the local skill server: </p><p><code>go get github.com/danielcondemarin/ci-commander/alexa-teamcity</code></p><p>Open another terminal and go to the project src (Pro Tip: Use <code>tmux</code>):</p><p><code>cd $GOPATH/src/github.com/danielcondemarin/ci-commander/alexa-teamcity/</code></p><p>Edit the file <code>skill.json</code> and add your ngrok HTTPS Forwarding URL to apis.custom.endpoint.uri (Leave /echo/teamcity in the path!). Mine looked like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;apis&quot;: &#123;</span><br><span class="line">      &quot;custom&quot;: &#123;</span><br><span class="line">        &quot;endpoint&quot;: &#123;</span><br><span class="line">          &quot;sslCertificateType&quot;: &quot;Wildcard&quot;,</span><br><span class="line">          &quot;uri&quot;: &quot;https://12db3c1b.ngrok.io/echo/teamcity&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;interfaces&quot;: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>It’s time now to add your build types to the interaction model. We need this so Alexa can identify them in the user utterances. For example:</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1528538256/AlexaTeamCityUtterance_ejvrb4.png" alt="Utterance"></p><p>Open <code>models/en-GB.json</code>, go to <code>types[].values[]</code> and add your builds with its synonyms. If you have one of those strange build ids with underscores etc. you can set the “value” with the original build id, then synonyms can be easier to pronounce. For example, this is what my config looks like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;types&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;values&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;name&quot;: &#123;</span><br><span class="line">                &quot;value&quot;: &quot;SuperPoo_Build&quot;,</span><br><span class="line">                &quot;synonyms&quot;: [&quot;superpoo&quot;, &quot;poo&quot;]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          &quot;name&quot;: &quot;BuildType&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br></pre></td></tr></table></figure><p>We’re nearly there now! If you haven’t already, run <code>ask init</code> and setup your profile etc.</p><p>Then, make sure you’re in the directory <code>alexa-teamcity</code> and deploy the skill interaction model:</p><p><code>ask deploy</code></p><p>Lastly, grab the alexa <code>skill_id</code> form the file <code>.ask/config</code> and spin up the local skill server. Make sure you replace the env variables with your own values:</p><p><code>ALEXA_APP_ID=&quot;amzn1.ask.skill.xxxx-xxx&quot; TEAMCITY_URL=&quot;http://127.0.0.1:8111&quot; TEAMCITY_USER=&quot;user&quot; TEAMCITY_PASS=&quot;pwd&quot; /Users/daniel/Projects/go/bin/alexa-teamcity</code></p><p>If you’ve reached this point without issues, here is a quick demo of what you should be able to do!</p><div class="video-container"><iframe src="//player.vimeo.com/video/274291984" frameborder="0" allowfullscreen></iframe></div><p><strong>Final Notes</strong></p><p>Apart from the learning involved in setting it all up, there is no reason why you couldn’t use this with an amazon echo and bring your CI to a whole new level of fun in the office! </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/danielcondemarin/image/upload/v1528591697/alexa_teamcity_cover_xs8rx5.jpg&quot; alt=&quot;alexateamcity&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="AWS" scheme="https://www.devpanda.me/tags/AWS/"/>
    
      <category term="TeamCity" scheme="https://www.devpanda.me/tags/TeamCity/"/>
    
      <category term="Alexa" scheme="https://www.devpanda.me/tags/Alexa/"/>
    
      <category term="Alexa Golang" scheme="https://www.devpanda.me/tags/Alexa-Golang/"/>
    
      <category term="Golang" scheme="https://www.devpanda.me/tags/Golang/"/>
    
      <category term="Alexa Skill" scheme="https://www.devpanda.me/tags/Alexa-Skill/"/>
    
  </entry>
  
  <entry>
    <title>Alexa Go Local!</title>
    <link href="https://www.devpanda.me/2018/05/26/Alexa-Go-Local/"/>
    <id>https://www.devpanda.me/2018/05/26/Alexa-Go-Local/</id>
    <published>2018-05-26T14:58:44.000Z</published>
    <updated>2018-05-26T15:48:03.323Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1527349668/AlexaGoLocal_xip103.png" alt="Alexa Go Local"></p><p>In the last few days, I’ve been exploring the world of Alexa Development. One of the challenges I’ve found, is that it wasn’t immediately obvious how to run and test your skill locally.</p><p>In this post, I’ll show you how to spin up a skill on localhost, and test it from the alexa developer portal. Ah! you probably already guessed from the title, but we’ll be using Golang today!</p><p>First, you need to setup your local skill server, think of it as a Lambda function you’ll host on your machine, therefore much easier to test. Luckily there is a great <a href="https://github.com/mikeflynn/go-alexa/tree/master/skillserver" target="_blank" rel="noopener">go pkg</a> out there already for this.</p><p>Let’s create our project and call it <em>Greeter</em>, make sure you replace <em>github.com/danielcondemarin</em> with your own namespace!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/danielcondemarin/</span><br><span class="line">mkdir greeter &amp;&amp; cd &quot;$_&quot;</span><br><span class="line">touch main.go</span><br></pre></td></tr></table></figure><p>Now <em>go get</em> the skill server pkg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/mikeflynn/go-alexa/skillserver</span><br></pre></td></tr></table></figure><p>In your favourite editor, change <em>main.go</em> to:</p><script src="//gist.github.com/626c7bde6c5c7c558763e95b2e7b19df.js"></script><p>Now head onto the <a href="https://developer.amazon.com/alexa" target="_blank" rel="noopener">developer portal</a> and create the skill:</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1527344795/create_skill_1_uop6tn.png" alt="Create Skill Step 1"></p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1527344796/create_skill_2_avh9y0.png" alt="Create Skill Step 2"></p><p>After creating the skill, take a step back, copy the Skill ID on the main dashboard and set <strong>AppID</strong> in <strong>main.go</strong>.</p><p>You can now build the go skill server, and run it. By default will be hosted on <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go build *.go</span><br><span class="line">./main</span><br></pre></td></tr></table></figure><p>Next, set an invocation name, just <em>greeter</em> will do. We will also need an <em>intent</em> and <em>intent slot</em> for the person name we want to greet!</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1527345367/create_skill_4_vqzzfl.png" alt="Skill Intent"></p><p>Notice the name’s slotType is already provided by Amazon, <strong>AMAZON.GB_FIRST_NAME</strong>. You will also want to set the slot required to fulfill the intent, to do that just click on the slot and enable the first toggle. Provide a prompt for the user to fill the slot too. </p><p>Next up, the Skill Endpoint, but before we configure that, go and download <a href="https://ngrok.com/download" target="_blank" rel="noopener">ngrok</a>. If you don’t know what ngrok is, it’s basically a way for you to expose on the public internet a local port or service in your machine.</p><p>Run ngrok and set it to forward to port 3000 over http:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok http 3000</span><br></pre></td></tr></table></figure><p>Copy the HTTPS URL, not HTTP! as Amazon requires a secure connection, go to the developer portal and on the Endpoint section select an HTTPS endpoint and paste the ngrok URL plus the path <strong>/echo/greeter</strong> (Mine was <a href="https://aa60ae80.ngrok.io/echo/greeter" target="_blank" rel="noopener">https://aa60ae80.ngrok.io/echo/greeter</a>). Make sure you select <em>“My development endpoint is a subdomain of a domain that has a wildcard certificate …”</em>.</p><p>Click Save Model, Build Model, and we are good to test! </p><p>Here is a screenshot with a few utterances I tried:</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1527346120/create_skill_5_uqulio.png" alt="utterances"></p><p>That’s the end of the blog post, hope you’ve enjoyed it and feel free to comment below if you have any questions!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/danielcondemarin/image/upload/v1527349668/AlexaGoLocal_xip103.png&quot; alt=&quot;Alexa Go Local&quot;&gt;&lt;/p&gt;
&lt;p&gt;In t
      
    
    </summary>
    
    
      <category term="AWS" scheme="https://www.devpanda.me/tags/AWS/"/>
    
      <category term="Alexa" scheme="https://www.devpanda.me/tags/Alexa/"/>
    
      <category term="Alexa Golang" scheme="https://www.devpanda.me/tags/Alexa-Golang/"/>
    
      <category term="Golang" scheme="https://www.devpanda.me/tags/Golang/"/>
    
      <category term="Alexa Skill" scheme="https://www.devpanda.me/tags/Alexa-Skill/"/>
    
  </entry>
  
  <entry>
    <title>Simple Angular and React Hybrid App</title>
    <link href="https://www.devpanda.me/2018/02/16/Simple-Angular-and-React-Hybrid-App/"/>
    <id>https://www.devpanda.me/2018/02/16/Simple-Angular-and-React-Hybrid-App/</id>
    <published>2018-02-16T21:25:42.000Z</published>
    <updated>2018-02-17T19:20:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you have worked with legacy apps, you know doing a big bang migration of one framework to another is not easy peasy!</p><p>A bit of history:</p><p>Once upon a time I had worked on a project to migrate our legacy Angular app to React.js. Basically we had 2 separate applications, one for our mobile website, built using angular, angular-router. And our desktop app, on React. After duplicating our estimates for each piece of work, having to do the same feature on both Angular and React, we decided to stick with one of them and make the whole site responsive. Our choice was to responsify our Desktop app built in React.</p><p>In this post I will give you a starting point for you to do this, using the power of webpack and ngReact.</p><p>Show me the code!</p><p>Let’s start with our legacy angular app. Suppose this is the html page you’re serving:</p><script src="//gist.github.com/b1eb5e1d4916104a58200aa268224b81.js"></script><p>Note we have the script tags for <code>angular</code> and <code>angular-router</code> and our app <code>angular-app</code>. </p><p>Let’s have a look now at the angular app:</p><script src="//gist.github.com/b5c59b2294e6314935f596234e6e9f67.js"></script><p>There is nothing particularly interesting so far. Just a simple angular application which will render <code>/legacy/templates/home.html</code> for the route <code>/#home</code>. This is the home template:</p><script src="//gist.github.com/63c3a76d4837f9ba3ad3429865c96f3e.js"></script><p>If we serve what we have so far :</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1518813469/angular-react-hybrid-indexhtml_n6f3vm.png" alt="index.html"></p><p>Now, let’s suppose we want to render a React component in the home page template. For that I’m going to use <code>ngReact</code>, which uses <code>react</code> and <code>react-dom</code> to render your React components.<br>Before we configure <code>ngReact</code> in our angular app, let’s say we have the following React component which we want to render:</p><script src="//gist.github.com/7cd09185724dc418b824809c1955d719.js"></script><p>Now, we will bundle our react app using webpack. The most IMPORTANT thing to note here is we need to EXPOSE in the window the React component, so that ngReact can actually see it and use it.</p><p>This is the webpack.config:</p><script src="//gist.github.com/eed36be54b42e6799f5e67989d830749.js"></script><p>First, on our <code>entry</code>, note we are <strong>explicitly</strong> requiring <code>react-dom</code> and <code>ngReact</code>. If we don’t do this, webpack won’t include it in the bundle as these libraries are not used in the React app. Note we don’t do <code>ReactDOM.render ...</code> anywhere.<br>The second important part is the <code>output</code> where we have asked webpack: Can you expose in the <strong>root scope</strong>(that’s what <code>libraryTarget: &quot;var&quot;</code> means) a variable called <code>ReactEntry</code>?  This will allow you to access <code>DummyComponent</code> from the window: <code>window.ReactEntry.DummyComponent</code>.<br>Lastly, we use the plugin <code>expose-loader</code> to have the library ngReact on the window as well. Alternatively you could have ngReact on a script tag separately from your webpack bundle, but I prefer to have everything processed by webpack whenever possible.</p><p>Now, let’s configure ngReact. First, we need to add an extra dependency called ‘react’ to the angular module:</p><p><code>var myApp = angular.module(&#39;myApp&#39;, [&#39;ngRoute&#39;, &#39;react&#39;]);</code></p><p>Then set the component for ngReact to use like this:</p><p><code>myApp.value(&#39;DummyComponent&#39;, window.ReactEntry.DummyComponent);</code></p><p>Now we can render DummyComponent in home.html using a custom directive provided by ngReact:</p><p><react-component name="DummyComponent"></react-component></p><p>And this is what the final product looks like:</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1518816097/react-hybrid-final_bu4uoq.png" alt="index.html"></p><p>There is a repo available on github, <a href="https://github.com/danielcondemarin/angular-react-hybrid" target="_blank" rel="noopener">https://github.com/danielcondemarin/angular-react-hybrid</a>.</p><p>Feel free to comment below if you have any questions :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you have worked with legacy apps, you know doing a big bang migration of one framework to another is not easy peasy!&lt;/p&gt;
&lt;p&gt;A bit of h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AWS CodePipeline - Integrating with TeamCity</title>
    <link href="https://www.devpanda.me/2017/11/05/AWS-CodePipeline-Integrating-with-TeamCity/"/>
    <id>https://www.devpanda.me/2017/11/05/AWS-CodePipeline-Integrating-with-TeamCity/</id>
    <published>2017-11-05T22:00:37.000Z</published>
    <updated>2018-05-26T14:59:55.910Z</updated>
    
    <content type="html"><![CDATA[<p>AWS CodePipeline is an excellent tool for orchestrating your deployments in the cloud. It provides out of the box integration with  CI Providers such as CodeBuild, Jenkins and Solano CI. Other providers can be configured as well, like TeamCity, and that’s the aim of this post.</p><p>In order to understand the extensibility point in CodePipeline that allows to plugin a custom action like a TeamCity Build, read <a href="http://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html</a> which explains in depth custom action types in CodePipeline.</p><p>We will be setting up a deployment pipeline to automate releases of a simple nodejs app hosted in GitHub. To provision the Pipeline, we will use CloudFormation, which means you can provision it in an automated fashion. </p><p>So, let’s start by creating our project folder, let’s call it <code>node-app-devops</code>. Next, create a directory inside the project called <code>templates</code>, which is where your cloud formation template will be, let’s name it <code>deployment-pipeline.yaml</code>.</p><p>Open <code>deployment-pipeline.yaml</code> in an editor of your preference and let’s start by adding a <strong>Description</strong> to your template, and the <strong>Parameters</strong>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Description: &gt;</span><br><span class="line">    This template will provision the  CodePipeline for the App.</span><br><span class="line">    (Pipeline) GitHub -&gt; TeamCity</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line">   </span><br><span class="line">    GitHubOwner:</span><br><span class="line">        Description: Repository Owner</span><br><span class="line">        Type: String</span><br><span class="line">    </span><br><span class="line">    GitHubRepo:</span><br><span class="line">        Description: Repository Name</span><br><span class="line">        Type: String</span><br><span class="line">   </span><br><span class="line">    GitHubBranch:</span><br><span class="line">        Description: Repository Branch</span><br><span class="line">        Type: String</span><br><span class="line">   </span><br><span class="line">    GitHubOAuthToken:</span><br><span class="line">        Description: Access Token Generated via GitHub (https://github.com/settings/tokens)</span><br><span class="line">        Type: String</span><br><span class="line">   </span><br><span class="line">    TeamCityServerUrl:</span><br><span class="line">        Description: Url for TeamCity. Expected URL format, http[s]://host[:port]</span><br><span class="line">        Type: String</span><br><span class="line">   </span><br><span class="line">    TeamCityBuildId:</span><br><span class="line">        Description: Build Id for TeamCity Project</span><br><span class="line">        Type: String</span><br><span class="line">   </span><br><span class="line">    TeamCityActionId:</span><br><span class="line">        Description: Action Id for Codepipeline integration with TeamCity</span><br><span class="line">        Type: String</span><br></pre></td></tr></table></figure><p><code>GitHubOwner</code> would be simply your GitHub username, <code>GitHubRepo</code> the name of the repository and <code>GitHubBranch</code> is the branch where CodePipeline will fetch from. <code>GitHubOAuthToken</code> can be created if you don’t have one already, by going to <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a>.</p><p>So far, it should be looking like this:</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1509871274/AWS-CodePipeline-Integrating-with-TeamCity/description_and_parameters.png" alt="Description And Parameters"></p><p>Next, let’s work on the <code>Resources</code> section, starting with the IAM Role used by the Pipeline. The role will provide access to an S3 Bucket, which will store the artifacts.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Resources:</span><br><span class="line">   </span><br><span class="line">    CodePipelineServiceRole:</span><br><span class="line">        Type: AWS::IAM::Role</span><br><span class="line">        Properties:</span><br><span class="line">            RoleName: !Sub &apos;cpsr-$&#123;AWS::StackName&#125;&apos;</span><br><span class="line">            Path: /</span><br><span class="line">            AssumeRolePolicyDocument: </span><br><span class="line">                Statement:</span><br><span class="line">                    -</span><br><span class="line">                        Effect: Allow</span><br><span class="line">                        Principal:</span><br><span class="line">                            Service:</span><br><span class="line">                                - codepipeline.amazonaws.com</span><br><span class="line">                        Action:</span><br><span class="line">                            - sts:AssumeRole</span><br><span class="line">            Policies:</span><br><span class="line">                - </span><br><span class="line">                    PolicyName: !Sub &apos;cpsrp-$&#123;AWS::StackName&#125;&apos;</span><br><span class="line">                    PolicyDocument:</span><br><span class="line">                        Statement:</span><br><span class="line">                            - Resource:</span><br><span class="line">                                - !Sub &apos;arn:aws:s3:::$&#123;ArtifactBucket&#125;/*&apos;</span><br><span class="line">                              Effect: Allow</span><br><span class="line">                              Action: </span><br><span class="line">                                - s3:PutObject</span><br><span class="line">                                - s3:GetObject</span><br><span class="line">    </span><br><span class="line">    ArtifactBucket:</span><br><span class="line">        Type: AWS::S3::Bucket</span><br><span class="line">        DeletionPolicy: Retain</span><br></pre></td></tr></table></figure><p>Note, how in <strong>RoleName</strong> I’m using <code>cpsr-${AWS::StackName}</code>, as convention <strong>cpsr</strong> stands for the initials of the Resource being provisioned, and we append the Pseudo Parameter <code>AWS::StackName</code> to have a more unique name which can also be easily associated to the Stack.<br>In the <code>Policies</code> there will be one that provides the S3 access needed by the Pipeline.<code>ArtifactBucket</code> is simply the S3 bucket that will be used as intermediate storage between TeamCity and CodePipeline.</p><p>Next, let’s do the actual integration with TeamCity on our pipeline. For that, we need a <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-customactiontype.htm" target="_blank" rel="noopener">Custom Action Type</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">TeamCityBuildActionType:</span><br><span class="line">    Type: AWS::CodePipeline::CustomActionType</span><br><span class="line">    Properties:</span><br><span class="line">        Version: 1</span><br><span class="line">        Category: Build</span><br><span class="line">        Provider: TeamCity</span><br><span class="line">        Settings:</span><br><span class="line">            EntityUrlTemplate: &apos;&#123;Config:TeamCityServerURL&#125;/viewType.html?buildTypeId=&#123;Config:BuildConfigurationID&#125;&apos;</span><br><span class="line">            ExecutionUrlTemplate: &apos;&#123;Config:TeamCityServerURL&#125;/viewLog.html?buildId=&#123;ExternalExecutionId&#125;&amp;tab=buildResultsDiv&apos;</span><br><span class="line">        ConfigurationProperties:</span><br><span class="line">            - Name: TeamCityServerURL</span><br><span class="line">              Description: The expected URL format is http:[s]://host[:port]</span><br><span class="line">              Required: true</span><br><span class="line">              Key: true</span><br><span class="line">              Secret: false</span><br><span class="line">              Queryable: false</span><br><span class="line">              Type: String</span><br><span class="line">            - Name: BuildConfigurationID</span><br><span class="line">              Description: TeamCity configuration external Id</span><br><span class="line">              Required: true</span><br><span class="line">              Key: true</span><br><span class="line">              Secret: false</span><br><span class="line">              Queryable: false</span><br><span class="line">              Type: String</span><br><span class="line">            - Name: ActionID</span><br><span class="line">              Description: &gt; </span><br><span class="line">                  Must be unique, match the corresponding field in TeamCity build trigger settings and satisfy regular expression pattern: [a-zA-Z0-9_-]+] and have length &lt;= 20</span><br><span class="line">              Required: true</span><br><span class="line">              Key: true</span><br><span class="line">              Secret: false</span><br><span class="line">              Queryable: true</span><br><span class="line">              Type: String</span><br><span class="line">        InputArtifactDetails:</span><br><span class="line">            MaximumCount: 5</span><br><span class="line">            MinimumCount: 0</span><br><span class="line">        OutputArtifactDetails:</span><br><span class="line">            MaximumCount: 5</span><br><span class="line">            MinimumCount: 0</span><br></pre></td></tr></table></figure><p>Note that ActionID is the value that will link TeamCity together with CodePipeline, but more on that later.</p><p>Lastly, let’s bring all the pieces together and implement the actual CodePipeline:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Pipeline:</span><br><span class="line">    Type: AWS::CodePipeline::Pipeline</span><br><span class="line">    Properties:</span><br><span class="line">        RoleArn: !GetAtt CodePipelineServiceRole.Arn</span><br><span class="line">        ArtifactStore:</span><br><span class="line">            Type: S3</span><br><span class="line">            Location: !Ref ArtifactBucket</span><br><span class="line">        Stages:</span><br><span class="line">            - Name: Source</span><br><span class="line">              Actions:</span><br><span class="line">                  - Name: GitHubSource</span><br><span class="line">                    ActionTypeId: </span><br><span class="line">                        Category: Source</span><br><span class="line">                        Owner: ThirdParty</span><br><span class="line">                        Version: 1</span><br><span class="line">                        Provider: GitHub</span><br><span class="line">                    Configuration:</span><br><span class="line">                        Owner: !Ref GitHubOwner</span><br><span class="line">                        Repo: !Ref GitHubRepo</span><br><span class="line">                        Branch: !Ref GitHubBranch</span><br><span class="line">                        OAuthToken: !Ref GitHubOAuthToken</span><br><span class="line">                    OutputArtifacts:</span><br><span class="line">                        - Name: AppRepo</span><br><span class="line">            - Name: Build</span><br><span class="line">              Actions:</span><br><span class="line">                  - Name: TeamCityBuild</span><br><span class="line">                    ActionTypeId:</span><br><span class="line">                        Category: Build</span><br><span class="line">                        Owner: Custom</span><br><span class="line">                        Version: 1</span><br><span class="line">                        Provider: TeamCity</span><br><span class="line">                    Configuration:</span><br><span class="line">                        TeamCityServerURL: !Ref TeamCityServerUrl</span><br><span class="line">                        BuildConfigurationID: !Ref TeamCityBuildId</span><br><span class="line">                        ActionID: !Ref TeamCityActionId</span><br><span class="line">                    InputArtifacts:</span><br><span class="line">                        - Name: AppRepo</span><br><span class="line">                    OutputArtifacts:</span><br><span class="line">                        - Name: BuildOutput</span><br></pre></td></tr></table></figure><p>I know what you’re thinking, there is a missing piece, which is the deployment stage right? :) Well the purpose of the post is to show how to integrate with TeamCity your CodePipeline, so we’ll keep it simple, and maybe have another post later on how to integrate with other services for deploying.</p><p>Let’s now create the BuildConfiguration in TeamCity for the app, but first, we need to install a plugin which will be responsible for pulling any build jobs provided by the Pipeline. The plugin can be found <a href="https://confluence.jetbrains.com/display/TW/AWS+CodePipeline+Plugin" target="_blank" rel="noopener">here</a>. If you’ve never installed a plugin before on TeamCity, just go to <strong>Administration &gt; Plugins List</strong> and click on <strong>Upload plugin zip</strong>. You can get the plugin zip from the link above. You might need to restart the TeamCity server after uploading the plugin. Should look this after installing it:</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1509908370/AWS-CodePipeline-Integrating-with-TeamCity/teamcityplugins.png" alt="TeamCity Plugins"></p><p>Note how I’ve got a plugin for better nodejs integration with TeamCity, that will come handy when we configure our build. You can find it <a href="https://github.com/jonnyzzz/TeamCity.Node" target="_blank" rel="noopener">here</a>, install it like you did for the previous one.</p><p>Create a new Project in TeamCity, and a build configuration, skip the VCS setup, since our repository will come from CodePipeline instead of a version control provider. I named my project <code>Demo App</code>, and the build configuration <code>DemoAppBuild</code>. First, we need to configure a Trigger, which will execute the build configuration whenever the Pipeline needs it to. If you’ve installed correctly the CodePipeline plugin for TeamCity, you should be able to configure the trigger like this:<br><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1509909920/AWS-CodePipeline-Integrating-with-TeamCity/codepipelinetrigger.png" alt="CodePipeline Trigger"><br>Use your own AWS Access Keys. Also, in ActionID just put anything meaningful, this will be the value that will tie together your build configuration with the Pipeline in AWS.</p><p>Now let’s configure the Build Steps. I have 5 build steps:</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1509910295/AWS-CodePipeline-Integrating-with-TeamCity/buildsteps.png" alt="Build Steps">.</p><p>Steps 1, 3 and 4 can be configured easily by using the jonnyzzz plugin mentioned above, so I won’t go in detail for these. Now, let’s have a look at step <code>2. Copy Repository To Working Directory</code>. This is a command line script which will pickup the repository dropped by CodePipeline and copy it to the build working directory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># vars</span><br><span class="line">repo_input_zip=&quot;%codepipeline.artifact.input.folder%/AppRepo.zip&quot;</span><br><span class="line"></span><br><span class="line"># unzip repo to working directory</span><br><span class="line">unzip $repo_input_zip -d %teamcity.build.workingDir%</span><br></pre></td></tr></table></figure><p>The variable <code>%codepipeline.artifact.input.folder%</code> is automatically setup by the plugin, and points to the directory where the repository will be dropped.</p><p>Let’s have a look now at the last step: <code>5. Copy Repository To CodePipeline Output Directory</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># vars</span><br><span class="line">repo_output_zip=&quot;%codepipeline.artifact.output.folder%/BuildOutput.zip&quot;</span><br><span class="line"></span><br><span class="line"># zip &amp; copy repo to output directory for codepipeline</span><br><span class="line">zip -r $repo_output_zip %teamcity.build.workingDir%</span><br></pre></td></tr></table></figure><p>This step will basically copy the build artifact to the pickup directory for CodePipeline to copy from.</p><p>It is demo time now, so let’s go ahead now and launch our stack:</p><p><a href="https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=AppPipeline&amp;templateURL=https://s3-eu-west-1.amazonaws.com/devpanda-bucket/node-app-devops/cf-templates/deployment-pipeline.yaml" target="_blank" rel="noopener"><img src="https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png" alt="Launch Stack"></a></p><p>After following the Launch Stack link, you should get a screen like this:</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1509914716/AWS-CodePipeline-Integrating-with-TeamCity/cf-launch-parameters.png" alt="Stack Launch"></p><p>Make sure you replace <code>GitHubOAuthToken</code> with your own and the <code>TeamCityServerUrl</code> as well. The app node-demo-app is hosted on my account <a href="https://github.com/danielcondemarin/node-demo-app" target="_blank" rel="noopener">here</a><br>You should have access to it with your token, if not, just fork it and use  your own username and repository. Now follow the Stack creation, and after completion it should look like:</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1509915058/AWS-CodePipeline-Integrating-with-TeamCity/stackcompleted.png" alt="Stack Created"></p><p>After the Stack is created, it will automatically trigger the CodePipeline which should all work as expected. </p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1509915396/AWS-CodePipeline-Integrating-with-TeamCity/codepipelinesuccess.png" alt="Pipeline Success"></p><p>That is the end of this post, hope you enjoyed it, and is of good use in your devops toolbelt ;). All the sources for the demo can be found on the repo : <a href="https://github.com/danielcondemarin/node-app-devops" target="_blank" rel="noopener">https://github.com/danielcondemarin/node-app-devops</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AWS CodePipeline is an excellent tool for orchestrating your deployments in the cloud. It provides out of the box integration with  CI Pr
      
    
    </summary>
    
    
      <category term="AWS" scheme="https://www.devpanda.me/tags/AWS/"/>
    
      <category term="CodePipeline" scheme="https://www.devpanda.me/tags/CodePipeline/"/>
    
      <category term="Continuous Delivery" scheme="https://www.devpanda.me/tags/Continuous-Delivery/"/>
    
      <category term="Teamcity" scheme="https://www.devpanda.me/tags/Teamcity/"/>
    
  </entry>
  
  <entry>
    <title>AWS Route53 - DNS Whitelisting using Geolocation Routing</title>
    <link href="https://www.devpanda.me/2017/10/07/DNS-Blacklist-of-locations-countries-using-AWS-Route53/"/>
    <id>https://www.devpanda.me/2017/10/07/DNS-Blacklist-of-locations-countries-using-AWS-Route53/</id>
    <published>2017-10-07T13:41:25.000Z</published>
    <updated>2017-10-15T14:16:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Assumptions:  Basic knowledge of AWS Route53</p><p>DNS can be a powerful tool, more so if you are using AWS Route53 as your provider.</p><p>In this post I will focus on how to use Route53’s <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-geo" target="_blank" rel="noopener">Geolocation routing</a> as a whitelist / blacklist of users originating from around the world.</p><p>So, let’s assume you only want users from the United Kingdom to access your website. This could be because all your customer base and operations are UK based, or maybe your application was DDoS’ed from various countries around the world, and you want to make sure any DNS query issued from this malicious Origin / IP is null routed.</p><p>First, let’s go to Route53 and create our first record set :</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1507497187/nullrouteset.png" alt="Null Route"></p><p>Please note this will be our default route, which will resolve to the IP Address <a href="https://en.wikipedia.org/wiki/Null_route" target="_blank" rel="noopener">0.0.0.0</a>. So, whenever a user attempts to reach your website domain (i.e. mywebsite.somedomain.co.uk) Route53 will resolve that DNS Query to <code>0.0.0.0</code>, then your machine will attempt to reach the website via the IP 0.0.0.0 which obviously doesn’t exist and will fail.</p><p>Let’s setup now the record for users originating from the UK and assume our webserver will be hosted on a server with IP <code>54.12.12.12</code> :</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1507497187/ukrouteset.png" alt="UK Route"></p><p>That should be it, the A records just created along with the domain NS records should be listed in your website Hosted Zone like this:</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1507497187/hostedzone.png" alt="Hosted Zone"></p><p>But how do we test this is working correctly? It should be easy be using <code>dig</code> via your terminal. Just grab one of the nameservers for your domain, listed above, and run the following command :</p><p><code>./bin/dig/dig @your-nameserver mywebsite.somedomain.co.uk +client=45.63.111.158/24</code></p><p>Caveat : You will need a <a href="https://www.gsic.uva.es/~jnisigl/dig-edns-client-subnet.html" target="_blank" rel="noopener">patched version</a> of <code>dig</code> in order to use the <code>+client</code> option. This option allows you to tell the nameserver the user ip address, which then it uses to return an IP Address from your records, based on the estimated geolocation of the IP Address you passed. This mainly works thanks to the <a href="https://tools.ietf.org/html/rfc7871" target="_blank" rel="noopener">client subnet in DNS queries</a>. </p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1507500087/usdnsquery.png" alt="DNS Query with American IP Address"></p><p>I used the IP Address <code>45.63.111.158</code> which is from an American DNS Server I’ve found here <a href="https://public-dns.info/" target="_blank" rel="noopener">https://public-dns.info/</a>. Make sure you look again for a different IP since this might change.</p><p>Now, for the UK:</p><p><img src="https://res.cloudinary.com/danielcondemarin/image/upload/v1507500087/ukdnsquery.png" alt="DNS Query with UK IP Address"></p><p>That’s about it really, hope you found it interesting and give some real use to it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Assumptions:  Basic knowledge of AWS Route53&lt;/p&gt;
&lt;p&gt;DNS can be a powerful tool, more so if you are using AWS Route53 as your provider.&lt;/p
      
    
    </summary>
    
    
      <category term="AWS" scheme="https://www.devpanda.me/tags/AWS/"/>
    
      <category term="Route53" scheme="https://www.devpanda.me/tags/Route53/"/>
    
      <category term="Geolocation" scheme="https://www.devpanda.me/tags/Geolocation/"/>
    
      <category term="Client Subnet" scheme="https://www.devpanda.me/tags/Client-Subnet/"/>
    
      <category term="DNS Blacklist" scheme="https://www.devpanda.me/tags/DNS-Blacklist/"/>
    
  </entry>
  
  <entry>
    <title>SSH Public Key authentication to your Edison</title>
    <link href="https://www.devpanda.me/2017/06/25/SSH-Public-Key-authentication-to-your-Edison/"/>
    <id>https://www.devpanda.me/2017/06/25/SSH-Public-Key-authentication-to-your-Edison/</id>
    <published>2017-06-25T08:43:38.000Z</published>
    <updated>2017-10-15T14:16:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>I believe the best developers are the laziest ones, those who <em>do more by doing less</em>. That includes not having to type in your password every time you want to login to your <strong>Intel Edison</strong>.</p><p>If you have worked with <strong>*nix</strong> systems, you might be familiar with SSH Public Key authentication. If you don’t know what that is, I strongly recommend having a read of this <a href="http://blakesmith.me/2010/02/08/understanding-public-key-private-key-concepts.html" target="_blank" rel="noopener">article</a>, it is by far one of the best explanations I’ve seen. </p><p>In a nutshell, we will be generating a private and a public key. Then we will copy ONLY the public key to the <strong>Edison</strong>. That way you will be able to login to the Edison automatically as long as you have the private key.</p><p>Let’s start, first open a terminal, then run the following commands:</p><ol><li><p>Generate private / public key pair via <a href="https://linux.die.net/man/1/ssh-keygen" target="_blank" rel="noopener">ssh-keygen</a>:</p><p> <code>ssh-keygen -t rsa</code></p><p> I named the key “<strong>edison_key</strong>“, but feel free to use your own name. When you’re prompted for the <strong>passphrase</strong> just press enter, to avoid creating one. It should all look like this:</p><p> <img src="/images/ssh-keygen.png" alt=""></p></li><li><p>Copy the public key (<strong>edison_key.pub</strong>) to your intel edison:</p><p> <code>cat /Users/daniel/.ssh/edison_key.pub | ssh root@192.168.0.10 &quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt;  ~/.ssh/authorized_keys&quot;</code></p><p> Make sure you replace <em>/Users/daniel/.ssh/edison_key.pub</em> with your own path. Also, I’m assuming the Edison is accessible via <strong>192.168.0.10</strong> with SSH enabled.</p></li><li><p>That’s it! Let’s connect now:</p><p><code>ssh root@192.168.0.10 -i /Users/daniel/.ssh/edison_key</code></p><p><img src="/images/login-via-pub.png" alt=""></p></li></ol><p>Tip: If you want to avoid specifying the private key <em>… -i /Users/daniel/.ssh/edison_key</em>, just use the default name when generating the key on step <em>1</em>, which is id_rsa.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I believe the best developers are the laziest ones, those who &lt;em&gt;do more by doing less&lt;/em&gt;. That includes not having to type in your pa
      
    
    </summary>
    
    
      <category term="Intel Edison" scheme="https://www.devpanda.me/tags/Intel-Edison/"/>
    
      <category term="SSH Public Key" scheme="https://www.devpanda.me/tags/SSH-Public-Key/"/>
    
  </entry>
  
</feed>
